name: Docker build and Deploy

on:
  push:
    branches: [master]

jobs:
  create-image-and-push-to-gcr:

    name: Create Image and Push to GCR
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: us-central1-docker.pkg.dev/my-demo-project-434216/my-demo-registry/hello_world:${{ github.sha }}

  update-deployment-manifest:
    needs: [create-image-and-push-to-gcr]

    name: Update Deployment Manifest
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Update Image Tag in Deployment
      run: |-
        sed -i -e "s|us-central1-docker.pkg.dev/my-demo-project-434216/my-demo-registry/hello-world:*|us-central1-docker.pkg.dev/my-demo-project-434216/my-demo-registry/hello_world:${{ github.sha }}|" ./kubernetes/deploy.yaml
    - name: Commit and Push Changes
      run: |-
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        # Add the updated deployment file to the staging area
        git add ./kubernetes/deploy.yaml

        # Only commit if there are changes
        if ! git diff-index --quiet HEAD; then
          git commit -m "Update image tag to ${{ github.sha }}"
          git push
        else
          echo "No changes detected, skipping commit."
        fi

  sync-argocd:
    needs: [update-deployment-manifest]

    name: Sync ArgoCD Application
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v2.8.0/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/local/bin/

    - name: Sync ArgoCD Application
      run: |
        argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USER }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
        argocd app sync ${{ secrets.ARGOCD_APP }}
